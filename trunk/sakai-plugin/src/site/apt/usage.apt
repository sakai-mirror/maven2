 ------
 Usage
 ------
 Pete Marvin King
 ------
 27 June 2006

~~ Copyright 2006 The Apache Software Foundation.
~~
~~ Licensed under the Apache License, Version 2.0 (the "License");
~~ you may not use this file except in compliance with the License.
~~ You may obtain a copy of the License at
~~
~~      http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~ See the License for the specific language governing permissions and
~~ limitations under the License.

~~ NOTE: For help with the syntax of this file, see:
~~ http://maven.apache.org/guides/mini/guide-apt-format.html

Usage

 There are 4 ways to use the war plugin :
 
 *using the package phase with the project package type as war
 
 *invocation of the <<<sakai-component:war>>> goal.
 
 *invocation of the <<<sakai-component:exploded>>> goal
 
 *invocation of the <<<sakai-component:inplace>>> goal

 *invocation of the <<<sakai-component:deploy>>> goal
 []

 <<When using the war goals it is assumed that the compile phase is already done. The war plugin is not responsible
   for compiling the java sources or copying of the resources.>> 

*Using the package phase with the project package type as war / invocation of the <<<sakai-component:war>>> goal

 This is the common way of using the war plugin. 
 To illustrate, given the <<<pom.xml>>>
    
+----------+
<project>
  [...]
  <groupId>com.example.projects</groupId>
  <artifactId>documentedproject</artifactId>
  <packaging>war</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>Documented Project</name>
  <url>http://example.com</url>
  [...]
</project>
+----------+

 with a project structure
 
+----------+
 .
 |-- pom.xml
 `-- src
     `-- main
         |-- java
         |   `-- com
         |       `-- example
         |           `-- projects
         |               `-- SampleAction.java
         |-- resources
         |   |-- images
         |   |   `-- sampleimage.jpg
         |   `-- sampleresource
         `-- webapp
             |-- WEB-INF
             |   `-- web.xml
             |-- index.jsp
             `-- jsp
                 `-- websource.jsp
+----------+

 and invoking
 
+----------+
   mvn package
+----------+

 or

+----------+
   mvn compile sakai-component:war
+----------+ 

 generates the war file <<<target/documentedproject-1.0-SNAPSHOT.war>>>.
  
+----------+
documentedproject-1.0-SNAPSHOT.war
  |-- META-INF
  |   |-- MANIFEST.MF
  |   `-- maven
  |       `-- com.example.projects
  |           `-- documentedproject
  |               |-- pom.properties
  |               `-- pom.xml
  |-- WEB-INF
  |   |-- classes
  |   |   |-- com
  |   |   |   `-- example
  |   |   |       `-- projects
  |   |   |           `-- SampleAction.class
  |   |   `-- images
  |   |       `-- sampleimage.jpg
  |   `-- web.xml
  |-- index.jsp
  `-- jsp
      `-- websource.jsp
+----------+    

*Invocation of <<<sakai-component:exploded>>> goal
 
 To speed up testing during the developement phase, sakai-component:explode can be use to generate the war in exploded
 form.
 Using the same project above and invoking 
 
+----------+
   mvn compile sakai-component:exploded
+----------+

 would generate an exploded version of the war in <<<target/documentedproject-1.0-SNAPSHOT>>>
 
+----------+
   documentedproject-1.0-SNAPSHOT
   |-- META-INF
   |-- WEB-INF
   |   |-- classes
   |   |   |-- com
   |   |   |   `-- example
   |   |   |       `-- projects
   |   |   |           `-- SampleAction.class
   |   |   `-- images
   |   |       `-- sampleimage.jpg
   |   `-- web.xml
   |-- index.jsp
   `-- jsp
       `-- websource.jsp
+----------+ 

 The default directory for the exploded war is <<<target/\<finalName\>>>>. The finalName is usually in the form
 of \<artifact\>-\<version\>. 
 This default directory can be overridden by specifying the webAppDirectory plugin parameter.
  
+-------+
<project>
  [...]
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <version>2.0</version>
        <configuration>
           <webAppDirectory>/sample/servlet/container/deploy/directory<webAppDirectory>    
        </configuration>
      </plugin>
    </plugins>
  </build>
  [...]  
</project>
+-------+  

*Invocation of <<<sakai-component:inplace>>> goal
 
 Another variation of the <<<sakai-component:exploded>>> is the <<<sakai-component:inplace>>>. In <<<sakai-component:inplace>>> the exploded war is created
 in the webapp source which defaults to <<<src/main/webapp>>>. 
 Using our sample project above, invoking
 
+----------+
   mvn compile sakai-component:exploded
+----------+

 would result to
 
+----------+
 .
 |-- pom.xml
 |-- src
 |   `-- main
 |       |-- java
 |       |   `-- com
 |       |       `-- ideal
 |       |           `-- projects
 |       |               `-- SampleAction.java
 |       |-- resources
 |       |   |-- images
 |       |   |   `-- sampleimage.jpg
 |       |   `-- sampleresource
 |       `-- webapp
 |           |-- META-INF
 |           |-- WEB-INF
 |           |   |-- classes
 |           |   |   |-- com
 |           |   |   |   `-- ideal
 |           |   |   |       `-- projects
 |           |   |   |           `-- SampleAction.class
 |           |   |   `-- images
 |           |   |       `-- sampleimage.jpg
 |           |   `-- web.xml
 |           |-- index.jsp
 |           `-- jsp
 |               `-- websource.jsp
 `-- target
     `-- classes
         |-- com
         |   `-- ideal
         |       `-- projects
         |           `-- SampleAction.class
         `-- images
             `-- sampleimage.jpg
+----------+ 
 
 
*Invocation of <<<sakai-component:deploy>>> goal
 
 Another variation of the <<<sakai-component:exploded>>> is the <<<sakai-component:deployin>>>. In <<<sakai-component:delpoy>>> the exploded war is created
 in the components directory which defaults to <<<${maven.tomcat.home}/components/${artifcatId}>>>. This can be changed by setting the <<<deployDirectory>>> setting in configuration.


  
